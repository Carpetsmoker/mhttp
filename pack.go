package zhttp

import (
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// Header writes a file header, which is a code generation comment and package
// declaration.
func Header(fp io.Writer, pkg string) error {
	_, err := fp.Write([]byte("// Code generated by pack.go; DO NOT EDIT.\n\n"))
	if err != nil {
		return err
	}
	_, err = fp.Write([]byte("package " + pkg + "\n\n"))
	return err
}

// PackFile writes a single file as a variable.
func PackFile(fp io.Writer, varname, path string) error {
	d, err := ioutil.ReadFile(path)
	if err != nil {
		return err
	}

	_, err = fmt.Fprintf(fp, "var %s = %s\n", varname, asbyte(d))
	return err
}

// PackDir recursively writes all files in a directory as variables.
func PackDir(fp io.Writer, varname, dir string) error {
	_, err := fp.Write([]byte("var " + varname + " = map[string][]byte{\n"))
	if err != nil {
		return err
	}

	err = filepath.Walk(dir, func(path string, st os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if st.IsDir() {
			return nil
		}

		d, err := ioutil.ReadFile(path)
		if err != nil {
			return err
		}

		_, err = fmt.Fprintf(fp, "\t\"%s\": %s,\n\n", path, asbyte(d))
		return err
	})
	if err != nil {
		return err
	}

	_, err = fp.Write([]byte("}\n\n"))
	return err
}

func asbyte(s []byte) string {
	var b strings.Builder
	for i, c := range s {
		if i%19 == 0 {
			b.WriteString("\n\t\t")
		}
		b.WriteString(fmt.Sprintf("%#x, ", c))
	}
	return "[]byte{" + b.String() + "}"
}
